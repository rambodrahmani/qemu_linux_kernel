/**
 * File: IOAPIC_EOIR.cpp
 *       EOIR - EOI Register
 *       The EOI register is present to provide a mechanism to maintain the
 *       level triggered semantics for level-triggered interrupts issued on the
 *       parallel bus.
 *
 *       When a write is issued to this register, the I/O APIC will check the
 *       lower 8 bits written to this register, and compare it with the vector
 *       field for each entry in the I/O Redirection Table. When a match is
 *       found, the Remote_IRR bit (Index Offset 10h, bit 14) for that I/O
 *       Redirection Entry will be cleared.
 *
 * Author: Rambod Rahmani <rambodrahmani@autistici.org>
 *         Created on 06/07/2019.
 */

#include "type.h"

natl* IOAPIC_EOIR = (natl*)0xFEE000B0;

/*
 * Types of interrupts
 * -------------------
 * Level-triggered
 * ---------------
 * A level-triggered interrupt is an interrupt signaled by maintaining the
 * interrupt line at a high or low logic level. A device wishing to signal a
 * level-triggered interrupt drives the interrupt request line to its active
 * level (high or low) and then holds it at that level until it is serviced. It
 * ceases asserting the line when the CPU commands it to or otherwise handles
 * the condition that caused it to signal the interrupt.
 *
 * Typically, the processor samples the interrupt input at predefined times
 * during each bus cycle such as state T2 for the Z80 microprocessor. If the
 * interrupt isn't active when the processor samples it, the CPU doesn't see it.
 * One possible use for this type of interrupt is to minimize spurious signals
 * from a noisy interrupt line: a spurious pulse will often be so short that it
 * is not noticed.
 *
 * Multiple devices may share a level-triggered interrupt line if they are
 * designed to. The interrupt line must have a pull-down or pull-up resistor so
 * that when not actively driven it settles to its inactive state. Devices
 * actively assert the line to indicate an outstanding interrupt, but let the
 * line float (do not actively drive it) when not signaling an interrupt. The
 * line is then in its asserted state when any (one or more than one) of the
 * sharing devices is signaling an outstanding interrupt.
 *
 * Level-triggered interrupts are favored by some because it is easy to share
 * the interrupt request line without losing the interrupts, when multiple
 * shared devices interrupt at the same time. Upon detecting assertion of the
 * interrupt line, the CPU must search through the devices sharing the interrupt
 * request line until one who triggered the interrupt is detected. After
 * servicing this device, the CPU may recheck the interrupt line status to
 * determine whether any other devices also need service. If the line is now
 * de-asserted, the CPU avoids checking the remaining devices on the line. Since
 * some devices interrupt more frequently than others, and other device
 * interrupts are particularly expensive, a careful ordering of device checks is
 * employed to increase efficiency. The original PCI standard mandated
 * level-triggered interrupts because of this advantage of sharing interrupts.
 *
 * Edge-triggered
 * --------------
 * An edge-triggered interrupt is an interrupt signaled by a level transition on
 * the interrupt line, either a falling edge (high to low) or a rising edge (low
 * to high). A device wishing to signal an interrupt drives a pulse onto the
 * line and then releases the line to its inactive state. If the pulse is too
 * short to be detected by polled I/O then special hardware may be required to
 * detect it.
 *
 * Multiple devices may share an edge-triggered interrupt line if they are
 * designed to. The interrupt line must have a pull-down or pull-up resistor so
 * that when not actively driven it settles to its inactive state, which is the
 * default sate of it. Devices signal an interrupt by briefly driving the line
 * to its non-default state, and let the line float (do not actively drive it)
 * when not signaling an interrupt. This type of connection is also referred to
 * as open collector. The line then carries all the pulses generated by all the
 * devices. (This is analogous to the pull cord on some buses and trolleys that
 * any passenger can pull to signal the driver that they are requesting a stop.)
 * However, interrupt pulses from different devices may merge if they occur
 * close in time. To avoid losing interrupts the CPU must trigger on the
 * trailing edge of the pulse (e.g. the rising edge if the line is pulled up and
 * driven low). After detecting an interrupt the CPU must check all the devices
 * for service requirements.
 *
 * Edge-triggered interrupts do not suffer the problems that level-triggered
 * interrupts have with sharing. Service of a low-priority device can be
 * postponed arbitrarily, while interrupts from high-priority devices continue
 * to be received and get serviced. If there is a device that the CPU does not
 * know how to service, which may raise spurious interrupts, it won't interfere
 * with interrupt signaling of other devices. However, it is easy for an
 * edge-triggered interrupt to be missed - for example, when interrupts are
 * masked for a period - and unless there is some type of hardware latch that
 * records the event it is impossible to recover. This problem caused many
 * "lockups" in early computer hardware because the processor did not know it
 * was expected to do something. More modern hardware often has one or more
 * interrupt status registers that latch interrupts requests; well-written
 * edge-driven interrupt handling code can check these registers to ensure no
 * events are missed.
 */

