/*
 * Programma di test 2016-06-15
 */

#include <sys.h>
#include <lib.h>

const int MSG_SIZE = 60;
const int NMESG = 2;

semaphore mailbox_piena value 0;
semaphore mailbox_vuota value 1;

process errato1 body err1(1), 22, LIV_UTENTE;
process errato2 body err2(2), 21, LIV_UTENTE;
process errato3 body err3(3), 20, LIV_UTENTE;
process errato4 body err4(4), 20, LIV_UTENTE;
process scrittore1 body pms(0), 6, LIV_UTENTE;
process scrittore2 body pms(1), 7, LIV_UTENTE;
process lettore   body pml(0), 5, LIV_UTENTE;

struct mess {
	int mittente;
	char corpo[MSG_SIZE];
};

mess mailbox;

struct mybuf {
	char b[MSG_SIZE * 100];
} __attribute__((aligned(4096)));

mybuf buf[2];

process_body err1(int a)
{
	natl quanti = 256;
	cedmaread(0, quanti, (char *)0x20000);
	printf("processo errato 1");
}

process_body err2(int a)
{
	natl quanti = 100;
	cedmaread(0, quanti, buf[0].b + 30);
	printf("processo errato 2");
}

process_body err3(int a)
{
	cedmaread2(0, (natl*)0x20100, buf[0].b);
	printf("processo errato 3");
}

process_body err4(int a)
{
	natl quanti = 4096 * 10;
	cedmaread(0, quanti, (char *)-4096);
	printf("processo errato 4");
}

process_body pms(int a)
{
	natl quanti;
	for (int i = 0; i < MSG_SIZE * 100; i++) {
		buf[a].b[i] = 'a' + a;
	}
	for (int i = 0; i < NMESG; i++) {
		quanti = MSG_SIZE * 100;
		if (!cedmaread(0, quanti, buf[a].b)) {
			printf("scrittore %d DMA incompleto", a);
		}
		flog(LOG_DEBUG, "%d: letti %d byte", a, quanti);
		sem_wait(mailbox_vuota);
		natl j, k;
		for (j = 0, k = 0; k < quanti; k += 100, j++) {
			mailbox.corpo[j] = buf[a].b[k];
		}
		mailbox.corpo[j] = '\0';
		mailbox.mittente = a;
		sem_signal(mailbox_piena);
	}
	printf("fine scrittore %d", a);
}

process_body pml(int a)
{
	char corpo[MSG_SIZE];
	int mittente;
	for (int i = 0; i < 2 * NMESG; i++) {
		sem_wait(mailbox_piena);
		mittente = mailbox.mittente;
		copy(mailbox.corpo, corpo);
		sem_signal(mailbox_vuota);
		printf("mittente=%d corpo=%s", mittente, corpo);
	}
	printf("fine lettore");
	pause();
}
