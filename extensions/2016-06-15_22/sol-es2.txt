******************************************
* io/io.cpp
******************************************

// ( SOLUZIONE 2016-06-15
extern "C" void c_cedmaread(natl id, char *buf, natl quanti)
{
	if (id >= next_ce) {
		flog(LOG_WARN, "dispositivo %d non esistente", id);
		abort_p();
	}

	des_ce *c = &array_ce[id];
	sem_wait(c->mutex);
	addr f = trasforma(buf);
	natw rem = 4096 - ((natq)f & 0xfff);
	if (rem > quanti)
		rem = quanti;
	flog (LOG_DEBUG, "virtuale %lx fisico %lx primo trasferimento: %d byte",
		buf, f, rem);
	c->buf = buf + rem;
	c->quanti = quanti - rem;
	outputl((natq)f, c->iBMPTR);
	outputl(rem, c->iBMLEN);
	outputl(1, c->iCMD);
	sem_wait(c->sync);
	sem_signal(c->mutex);
}

extern "C" void estern_ce(int id)
{
	des_ce *c = &array_ce[id];
	natl b;

	for (;;) {
		inputl(c->iSTS, b);
		if (c->quanti > 0) {
			natw rem = c->quanti;
			if (rem > 4096)
				rem = 4096;
			addr f = trasforma(c->buf);
			flog (LOG_DEBUG, "virtuale %lx fisico %lx trasferimento: %d byte",
				c->buf, f, rem);
			c->buf += rem;
			c->quanti -= rem;
			outputl((natq)f, c->iBMPTR);
			outputl(rem, c->iBMLEN);
			outputl(1, c->iCMD);
		} else {
			sem_signal(c->sync);
		}
		wfi();
	}
}
//   SOLUZIONE 2016-06-15 )


******************************************
* io/io.s
******************************************

// ( SOLUZIONE 2016-06-15
	fill_io_gate	IO_TIPO_CEREAD	a_cedmaread
//   SOLUZIONE 2016-06-15 )
// ( SOLUZIONE 2016-06-15
.EXTERN		c_cedmaread
a_cedmaread:
		cavallo_di_troia %rsi
		cavallo_di_troia2 %rsi, %rdx
		call c_cedmaread
		iretq
//   SOLUZIONE 2016-06-15 )


