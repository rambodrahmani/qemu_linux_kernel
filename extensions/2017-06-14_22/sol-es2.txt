******************************************
* io/io.cpp
******************************************

// ( SOLUZIONE 2017-06-14
extern "C" bool c_cedmaread(natl id, natl quanti, char *buf)
{
	bool rv = false;

	if (id >= next_ce) {
		flog(LOG_WARN, "ce non riconosciuto: %d", id);
		abort_p();
	}

	des_ce *ce = &array_ce[id];

	void *bounce = 0, *dst = buf;
	if (!isresident(buf, quanti)) {
		flog(LOG_DEBUG, "uso buffer intermedio per %p, %d", buf, quanti);
		bounce = mem_alloc(quanti);
		if (!bounce) {
			flog(LOG_WARN, "mem_alloc(%d) fallita", quanti);
			goto out;
		}
		dst = bounce;
	}

	sem_wait(ce->mutex);
	ce->error = false;
	outputl((natq)dst, ce->iVPTRLO);
	outputl((natq)dst >> 32, ce->iVPTRHI);
	outputl(quanti, ce->iCNT);
	outputl((natq)readCR3(), ce->iCR3);
	outputl(0, ce->iSTS);
	outputl(1, ce->iCMD);
	sem_wait(ce->sync);
	rv = !ce->error;
out:
	sem_signal(ce->mutex);
	if (bounce) {
		if (rv)
			memcpy(buf, dst, quanti);
		mem_free(bounce);
	}
	return rv;
}

extern "C" void estern_ce(int id)
{
	des_ce *ce = &array_ce[id];
	natl b;

	for (;;) {
		inputl(ce->iSTS, b);
		ce->error = (b & 2);
		sem_signal(ce->sync);
		wfi();
	}
}
//   SOLUZIONE 2017-06-14 )


******************************************
* io/io.s
******************************************

// ( SOLUZIONE 2017-06-14
	fill_io_gate	IO_TIPO_CEDMAREAD	a_cedmaread
//   SOLUZIONE 2017-06-14 )
// ( SOLUZIONE 2017-06-14
.EXTERN		c_cedmaread
a_cedmaread:
		.cfi_startproc
		.cfi_def_cfa_offset 40
		.cfi_offset rip, -40
		.cfi_offset rsp, -16
		cavallo_di_troia %rdx
		cavallo_di_troia2 %rdx %rsi
		call c_cedmaread
		iretq
		.cfi_endproc
//   SOLUZIONE 2017-06-14 )


