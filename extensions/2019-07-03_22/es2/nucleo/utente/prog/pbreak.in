/*
 * Mailbox
 */

#include <sys.h>
#include <lib.h>

process bad1 body bad(1), 40, LIV_UTENTE;
process bad2 body bad(2), 16, LIV_UTENTE;
process usr1 body usr(1), 10, LIV_UTENTE;
process usr2 body usr(2), 30, LIV_UTENTE;
process usr3 body usr(3), 6, LIV_UTENTE;
process usr5 body usr(5), 5, LIV_UTENTE;
process usr8 body usr(8), 9, LIV_UTENTE;
process dbg1  body debugger(0), 20, LIV_UTENTE;
process dbg2  body debugger(1), 22, LIV_UTENTE;
process dbg3  body debugger(2), 8, LIV_UTENTE;
process last body last_body(0), 1, LIV_UTENTE;

semaphore sync value 0;
semaphore sync2 value 0;

process_body bad(int a)
{
	asm("int3");
	printf("processo errato %d", a);
}

void catch_me(int a)
{
	printf("proc%d: eseguo funzione", a);
}

vaddr bad_addr[] = { 1000, 0xffffc00000000000 };

process_body badb(int a)
{
}

process_body usr(int a)
{
	if (a % 2 == 0) {
		sem_wait(sync);
	}
	printf("proc%d: prima della funzione", a);
	catch_me(a);
	printf("proc%d: dopo la funzione", a);
}

process_body debugger(int a)
{
	printf("debugger %d: chiamo bpadd", a);
	if (!bpadd(reinterpret_cast<natq>(catch_me))) {
		printf("debugger %d: occupato", a);
	} else {
		for (int i = 0; i < 2; i++) {
			natl proc = bpwait();
			printf("debugger %d: breapoint intercettato, processo: %d", a, proc);
			if (i == 0)
				sem_signal(sync);
		}
		if (a == 2)
			delay(10);
		bpremove();
	}
}

process_body last_body(int a)
{
	pause();
}
